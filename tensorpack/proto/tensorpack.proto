syntax = "proto2";

package tensorpack;

message FillerParameter {
    // The filler type.
    optional string type = 1 [default = 'constant'];
    optional float value = 2 [default = 0]; // the value in constant filler
    repeated float custom_value = 9; // the value list for custom filler
    optional float factor = 10 [default = 1.0]; // the factor for uniform_unit_scaling filler
    optional float min = 3 [default = 0]; // the min value in uniform filler
    optional float max = 4 [default = 1]; // the max value in uniform filler
    optional float mean = 5 [default = 0]; // the mean value in Gaussian filler
    optional float std = 6 [default = 1]; // the std value in Gaussian filler
    // The expected number of non-zero output weights for a given input in
    // Gaussian filler -- the default -1 means don't perform sparsification.
    optional int32 sparse = 7 [default = -1];
    // Normalize the filler variance by fan_in, fan_out, or their average.
    // Applies to 'xavier' and 'msra' fillers.
    enum VarianceNorm {
        FAN_IN = 0;
        FAN_OUT = 1;
        AVERAGE = 2;
    }
    optional VarianceNorm variance_norm = 8 [default = FAN_IN];
}

message ConvolutionParameter {
    optional uint32 num_output = 1; // The number of outputs for the layer
    optional bool bias_term = 2 [default = true]; // whether to have bias terms
    // Pad, kernel size, and stride are all given as a single value for equal
    // dimensions in height and width or as Y, X pairs.
    enum PadType {
    VALID = 0;
    SAME = 1;
    }
    optional PadType pad = 3 [default = VALID];
    repeated uint32 kernel_size = 4; // The kernel size (square)
    optional uint32 kernel_h = 11; // The kernel height
    optional uint32 kernel_w = 12; // The kernel width
    optional uint32 group = 5 [default = 1]; // The group size for group conv
    optional uint32 stride = 6 [default = 1]; // The stride (equal in Y, X)
    optional uint32 stride_h = 13; // The stride height
    optional uint32 stride_w = 14; // The stride width
    optional FillerParameter weight_filler = 7; // The filler for the weight
    optional FillerParameter bias_filler = 8; // The filler for the bias
    enum Engine {
        DEFAULT = 0;
        CPU = 1;
        GPU = 2;
    }
    optional Engine engine = 15 [default = DEFAULT];
}